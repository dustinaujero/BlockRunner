/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./game.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./game.js":
/*!*****************!*\
  !*** ./game.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// import SimplexNoise from 'simplex-noise';\n// import * as THREE from 'three';\n// document.addEventListener(\"DOMContentLoaded\", () => {\n//     let scene;\n//     let camera;\n//     let renderer;\n//     let simplex;\n//     let plane;\n//     let geometry;\n//     let xZoom;\n//     let yZoom;\n//     let noiseStrength;\n//     function setup() {\n//         setupNoise();\n//         setupScene();\n//         setupCamera();\n//         setupRenderer();\n//         setupPlane();\n//         setupLights();\n//         setupEventListeners();\n//     }\n//     function setupNoise() {\n//         // By zooming y more than x, we get the\n//         // appearence of flying along a valley\n//         xZoom = 6;\n//         yZoom = 35;\n//         noiseStrength = 1.5;\n//         simplex = new SimplexNoise();\n//     }\n//     function setupScene() {\n//         scene = new THREE.Scene();\n//     }\n//     function setupCamera() {\n//         let res = window.innerWidth / window.innerHeight;\n//     camera = new THREE.PerspectiveCamera(75, res, 0.1, 1000);\n//     camera.position.x = 0;\n//     camera.position.y = -20;\n//     camera.position.z = 3;\n//     let controls = new THREE.OrbitControls(camera);\n//     }\n//     function setupRenderer() {\n//         renderer = new THREE.WebGLRenderer({\n//             antialias: true\n//         });\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     document.body.appendChild(renderer.domElement);\n//     }\n//     function setupPlane() {\n//         let side = 120;\n//     geometry = new THREE.PlaneGeometry(40, 40, side, side);\n//     let material = new THREE.MeshStandardMaterial({\n//         roughness: 0.8,\n//     color: new THREE.Color(0x00c500),\n//     });\n//     plane = new THREE.Mesh(geometry, material);\n//     plane.castShadow = true;\n//     plane.receiveShadow = true;\n//     scene.add(plane);\n//     }\n//     function setupLights() {\n//         let ambientLight = new THREE.AmbientLight(0x0c0c0c);\n//     scene.add(ambientLight);\n//     let spotLight = new THREE.SpotLight(0xcccccc);\n//     spotLight.position.set(-30, 60, 60);\n//     spotLight.castShadow = true;\n//     scene.add(spotLight);\n//     }\n//     function setupEventListeners() {\n//         window.addEventListener(\"resize\", onWindowResize);\n//     }\n//     function onWindowResize() {\n//         camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     }\n//     function draw() {\n//         requestAnimationFrame(draw);\n//     let offset = Date.now() * 0.0004;\n//     adjustVertices(offset);\n//     adjustCameraPos(offset);\n//     renderer.render(scene, camera);\n//     }\n//     function adjustVertices(offset) {\n//     for (let i = 0; i < plane.geometry.vertices.length; i++) {let vertex=plane.geometry.vertices[i]; let x=vertex.x /\n//         xZoom; let y=vertex.y / yZoom; let noise=simplex.noise2D(x, y + offset) * noiseStrength; vertex.z=noise; }\n//         geometry.verticesNeedUpdate=true; geometry.computeVertexNormals(); } function adjustCameraPos(offset) {let\n//         x=camera.position.x / xZoom; let y=camera.position.y / yZoom; let noise=simplex.noise2D(x, y + offset) *\n//     noiseStrength + 1.5; camera.position.z=noise; } setup(); draw();\n// });\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  var scene, camera, renderer, cube, floor, spotLight;\n  var cubeDY, cubeDX;\n  var frame;\n  var keyboard = {};\n  var cubes = [];\n  var counter = 0;\n\n  var init = function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(50, 1200 / 720, 0.1, 1000);\n    frame = 0;\n    camera.position.set(0, 5, 10); // camera.lookAt(new THREE.Vector3(0,-5, -5));\n    // camera.lookAt(new THREE.Vector3(0, -20, -100));\n\n    var shape = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n    var material = new THREE.MeshStandardMaterial({\n      color: 0xffffff\n    });\n    cube = new THREE.Mesh(shape, material);\n    cube.position.set(0, -1.5, 0);\n    cube.castShadow = true;\n    cube.receiveShadow = true;\n    scene.add(cube);\n    var floor = new THREE.Mesh(new THREE.PlaneGeometry(15, 250), new THREE.MeshStandardMaterial({\n      color: 0xC8C8C8\n    }));\n    floor.rotation.x -= Math.PI / 2;\n    floor.position.set(0, -3.1, 0);\n    floor.receiveShadow = true;\n    floor.castShadow = true;\n    scene.add(floor);\n    var rightWall = new THREE.Mesh(new THREE.PlaneGeometry(15, 250), new THREE.MeshStandardMaterial({\n      color: 0xffffff,\n      wireframe: false\n    }));\n    rightWall.rotation.x -= Math.PI / 2;\n    rightWall.rotation.y -= Math.PI / 2;\n    rightWall.position.set(7, -2, 0);\n    rightWall.receiveShadow = true;\n    rightWall.castShadow = true;\n    scene.add(rightWall);\n    var leftWall = new THREE.Mesh(new THREE.PlaneGeometry(15, 250), new THREE.MeshStandardMaterial({\n      color: 0xC8C8C8,\n      wireframe: false\n    }));\n    leftWall.rotation.x -= Math.PI / 2;\n    leftWall.rotation.y += Math.PI / 2;\n    leftWall.position.set(-7, -2, 0);\n    leftWall.receiveShadow = true;\n    leftWall.castShadow = true;\n    scene.add(leftWall);\n    var ambientLight = new THREE.AmbientLight(0xffffff, 1, 0, 0.1, 0, 1);\n    scene.add(ambientLight);\n    spotLight = new THREE.SpotLight(0xffffff, 50, 0, 0.3, 0, 1);\n    spotLight.position.set(0, 5, 15);\n    spotLight.castShadow = true;\n    spotLight.shadow.mapSize.width = 1024;\n    spotLight.shadow.mapSize.height = 1024;\n    spotLight.shadow.camera.near = 0.0;\n    spotLight.shadow.camera.far = -4000;\n    spotLight.lookAt(new THREE.Vector3(0, 5, 0));\n    scene.add(spotLight);\n    cubeDY = 0;\n    cubeDX = 0;\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(1200, 720);\n    renderer.physicallyCorrectLights = true;\n    document.body.appendChild(renderer.domElement);\n    animate();\n  };\n\n  var animate = function animate() {\n    requestAnimationFrame(animate);\n\n    if (cube.position.y < -3) {\n      cube.position.y = -2.3;\n    }\n\n    if (keyboard[37]) {\n      //LEFT\n      if (cube.position.x >= -6) {\n        cubeDX -= 0.025;\n      }\n    }\n\n    if (keyboard[39]) {\n      //RIGHT\n      if (cube.position.x <= 6) {\n        cubeDX += 0.025;\n      }\n    }\n\n    if (keyboard[38]) {\n      //UP\n      if (cube.position.y <= 1) {\n        cube.position.y += 0.3;\n        cubeDY = 0.1;\n      }\n    }\n\n    if (keyboard[40]) {\n      //DOWN\n      if (cube.position.y >= -2.5) {}\n    }\n\n    if (++frame % 10 == 0) {\n      renderNewCube();\n      renderNewCube2();\n      renderBar();\n    }\n\n    cubeDY -= 0.009;\n    cubeDX *= 0.9;\n\n    if (cube.position.y >= -2.5) {\n      cube.position.y += cubeDY;\n    }\n\n    cube.position.x += cubeDX;\n    camera.position.x = cube.position.x * 0.2;\n    camera.position.y = cube.position.y * 0.4;\n    var originPoint = cube.position.clone();\n\n    for (var vertexIndex = 0; vertexIndex < cube.geometry.vertices.length; vertexIndex++) {\n      var localVertex = cube.geometry.vertices[vertexIndex].clone();\n      var globalVertex = localVertex.applyMatrix4(cube.matrix);\n      var directionVector = globalVertex.sub(cube.position);\n      var ray = new THREE.Raycaster(originPoint, directionVector.clone().normalize());\n      var collisionResults = ray.intersectObjects(cubes);\n      if (collisionResults.length > 0 && collisionResults[0].distance < directionVector.length()) console.log(\"hit\");\n    }\n\n    cubes.forEach(function (cube) {\n      if (cube.position.z >= 5) {\n        scene.remove(cube);\n      } else {\n        cube.position.z += 0.5;\n      }\n    });\n    renderer.render(scene, camera);\n  };\n\n  var renderNewCube = function renderNewCube() {\n    var shape = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshStandardMaterial({\n      color: 0xffffff\n    });\n    var box = new THREE.Mesh(shape, material);\n    cubes.push(box);\n    var xCord = Math.random() * 12 - 6;\n    box.position.set(xCord, -2.5, -50);\n    box.castShadow = true;\n    box.receiveShadow = true;\n    scene.add(box);\n  };\n\n  var renderNewCube2 = function renderNewCube2() {\n    var shape = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshStandardMaterial({\n      color: 0xffffff\n    });\n    var box = new THREE.Mesh(shape, material);\n    cubes.push(box);\n    var xCord = Math.random() * 12 - 6;\n    box.position.set(xCord, 0, -50);\n    box.castShadow = true;\n    box.receiveShadow = true;\n    scene.add(box);\n  };\n\n  var renderBar = function renderBar() {\n    if (Math.random() >= 0.93) {\n      var shape = new THREE.BoxGeometry(10, 1, 1);\n      var material = new THREE.MeshStandardMaterial({\n        color: 0xffffff\n      });\n      var box = new THREE.Mesh(shape, material);\n      cubes.push(box);\n      var xCord = Math.random() * 12 - 6;\n      box.position.set(xCord, -1.5, -50);\n      box.castShadow = true;\n      box.receiveShadow = true;\n      scene.add(box);\n    }\n  };\n\n  var keyDown = function keyDown(e) {\n    keyboard[e.keyCode] = true;\n  };\n\n  var keyUp = function keyUp(e) {\n    keyboard[e.keyCode] = false;\n  };\n\n  window.addEventListener('keydown', keyDown);\n  window.addEventListener('keyup', keyUp);\n  init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./game.js\n");

/***/ })

/******/ });