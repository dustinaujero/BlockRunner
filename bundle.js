/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./game.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./game.js":
/*!*****************!*\
  !*** ./game.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("document.addEventListener(\"DOMContentLoaded\", function () {\n  var scene, camera, renderer, player, spotLight;\n  var playerDY, playerDX;\n  var frame;\n  var keyboard = {};\n  var cubes = [];\n  var yLevels = [0, -1, -1.5, -2, -2.5];\n  var game;\n\n  var init = function init() {\n    scene = new THREE.Scene(); //CAMERA\n\n    camera = new THREE.PerspectiveCamera(50, 1200 / 720, 0.1, 1000);\n    camera.position.set(0, 5, 5);\n    frame = 0; //CAMERA\n    //PLAYER\n\n    var shape = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n    var material = new THREE.MeshStandardMaterial({\n      color: 0xFF0000\n    });\n    player = new THREE.Mesh(shape, material);\n    player.position.set(0, -1.5, 0);\n    player.castShadow = true;\n    player.receiveShadow = true;\n    scene.add(player); //PLAYER\n\n    var floor = new THREE.Mesh(new THREE.PlaneGeometry(15, 250), new THREE.MeshStandardMaterial({\n      color: 0xC8C8C8\n    }));\n    floor.rotation.x -= Math.PI / 2;\n    floor.position.set(0, -3.1, 0);\n    floor.receiveShadow = true;\n    floor.castShadow = true;\n    scene.add(floor);\n    var rightWall = new THREE.Mesh(new THREE.PlaneGeometry(15, 250), new THREE.MeshStandardMaterial({\n      color: 0xffffff,\n      wireframe: false\n    }));\n    rightWall.rotation.x -= Math.PI / 2;\n    rightWall.rotation.y -= Math.PI / 2;\n    rightWall.position.set(7, -2, 0);\n    rightWall.receiveShadow = true;\n    rightWall.castShadow = true;\n    scene.add(rightWall);\n    var leftWall = new THREE.Mesh(new THREE.PlaneGeometry(15, 250), new THREE.MeshStandardMaterial({\n      color: 0xC8C8C8,\n      wireframe: false\n    }));\n    leftWall.rotation.x -= Math.PI / 2;\n    leftWall.rotation.y += Math.PI / 2;\n    leftWall.position.set(-7, -2, 0);\n    leftWall.receiveShadow = true;\n    leftWall.castShadow = true;\n    scene.add(leftWall);\n    var ambientLight = new THREE.AmbientLight(0xffffff, 1, 0, 0.1, 0, 1);\n    scene.add(ambientLight);\n    spotLight = new THREE.SpotLight(0xffffff, 50, 0, 0.3, 0, 1);\n    spotLight.position.set(0, 5, 15);\n    spotLight.castShadow = true;\n    spotLight.shadow.mapSize.width = 1024;\n    spotLight.shadow.mapSize.height = 1024;\n    spotLight.shadow.camera.near = 0.0;\n    spotLight.shadow.camera.far = -4000;\n    spotLight.lookAt(new THREE.Vector3(0, 5, 0));\n    scene.add(spotLight);\n    playerDY = 0;\n    playerDX = 0;\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(1200, 720);\n    renderer.physicallyCorrectLights = true;\n    document.body.appendChild(renderer.domElement);\n    animate();\n  };\n\n  var animate = function animate() {\n    if (player.position.y < -3) {\n      player.position.y = -2.3;\n    }\n\n    if (keyboard[37]) {\n      //LEFT\n      if (player.position.x >= -6) {\n        playerDX -= 0.025;\n      }\n    }\n\n    if (keyboard[39]) {\n      //RIGHT\n      if (player.position.x <= 6) {\n        playerDX += 0.025;\n      }\n    }\n\n    if (keyboard[38]) {\n      //UP\n      if (player.position.y <= 1) {\n        player.position.y += 0.3;\n        playerDY = 0.1;\n      }\n    }\n\n    if (keyboard[40]) {\n      //DOWN\n      if (player.position.y >= -2.5) {}\n    }\n\n    if (++frame % 10 == 0) {\n      renderNewCube();\n      renderNewCube();\n      renderBar();\n    }\n\n    playerDY -= 0.009;\n    playerDX *= 0.9;\n\n    if (player.position.y >= -2.5) {\n      player.position.y += playerDY;\n    }\n\n    player.position.x += playerDX;\n    camera.position.x = player.position.x * 0.4;\n    camera.position.y = player.position.y * 0.4; // const playerPos = player.position.clone();\n    // const playerXRange = [(player.geometry.vertices[0].x + playerPos.x), (player.geometry.vertices[4].x + playerPos.x)];\n    // const playerYRange = [(player.geometry.vertices[0].y + playerPos.y), (player.geometry.vertices[2].y + playerPos.y)];\n    // const playerZRange = [(player.geometry.vertices[0].z + playerPos.z), (player.geometry.vertices[1].z + playerPos.z)];\n\n    game = requestAnimationFrame(animate);\n    cubes.forEach(function (cube) {\n      if (cube.position.z >= 5) {\n        scene.remove(cube);\n      } else {\n        // const cubePos = cube.position.clone();\n        // const cubeVertPos = cube.geometry.vertices.map( vertex => {\n        //     vertex.x += cubePos.x;\n        //     vertex.y += cubePos.y;\n        //     vertex.z += cubePos.z;\n        // });\n        // debugger\n        // cubeVertPos.forEach(vertex => {\n        //     if (\n        //         vertex.x > playerXRange[0] && vertex.x < playerXRange[1] \n        //         &&\n        //         vertex.y > playerYRange[0] && vertex.y < playerYRange[1]\n        //         &&\n        //         vertex.z > playerZRange[0] && vertex.z < plyaerZRange[1]\n        //         ) {\n        //             alert(\"game over\");\n        //         }\n        // });\n        cube.position.z += 0.5;\n      }\n    });\n    var originPoint = player.position.clone();\n\n    for (var vertexIndex = 0; vertexIndex < player.geometry.vertices.length; vertexIndex++) {\n      var localVertex = player.geometry.vertices[vertexIndex].clone();\n      var globalVertex = localVertex.applyMatrix4(player.matrix);\n      var directionVector = globalVertex.sub(player.position);\n      var ray = new THREE.Raycaster(originPoint, directionVector.clone().normalize());\n      var collisionResults = ray.intersectObjects(cubes);\n\n      if (collisionResults.length === 1 && collisionResults[0].distance < directionVector.length()) {\n        debugger;\n        cancelAnimationFrame(game);\n        collisionResults[0].object.material.transparent = true;\n        collisionResults[0].object.material.opacity = 0.4;\n        collisionResults[0].object.material.color.setHex(0xFF0000);\n      }\n    }\n\n    renderer.render(scene, camera);\n  };\n\n  var renderNewCube = function renderNewCube() {\n    var shape = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshStandardMaterial({\n      color: 0xffffff\n    });\n    var box = new THREE.Mesh(shape, material);\n    cubes.push(box);\n    var xCord = Math.random() * 12 - 6;\n    var ySample = yLevels[Math.floor(Math.random() * yLevels.length)];\n    box.position.set(xCord, ySample, -50);\n    box.castShadow = true;\n    box.receiveShadow = true;\n    scene.add(box);\n  };\n\n  var renderBar = function renderBar() {\n    if (Math.random() >= 0.95) {\n      var shape = new THREE.BoxGeometry(10, 1, 1);\n      var material = new THREE.MeshStandardMaterial({\n        color: 0xffffff\n      });\n      var box = new THREE.Mesh(shape, material);\n      cubes.push(box);\n      var ySample = yLevels[Math.floor(Math.random() * yLevels.length)];\n      var xCord = Math.random() * 12 - 6;\n      box.position.set(xCord, ySample, -50);\n      box.castShadow = true;\n      box.receiveShadow = true;\n      scene.add(box);\n    }\n  };\n\n  var keyDown = function keyDown(e) {\n    keyboard[e.keyCode] = true;\n  };\n\n  var keyUp = function keyUp(e) {\n    keyboard[e.keyCode] = false;\n  };\n\n  window.addEventListener('keydown', keyDown);\n  window.addEventListener('keyup', keyUp);\n  init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./game.js\n");

/***/ })

/******/ });